;限定范围
;采用颗粒上的不平衡力计算矩张量
;==============================================================================
def look_AE(entries)
	local c0 = entries(1)
	local bp1 = contact.end1(c0)
    local bp2 = contact.end2(c0)
	global frac_pos_x = contact.pos.x(c0)
	global frac_pos_y = contact.pos.y(c0)
	local AE_switch = 0
	if ball.extra(bp1,1) # 0
		if table.y(exptab_5,ball.extra(bp1,1)) < AE_long
			if (table.y(exptab_10,ball.extra(bp1,1))-frac_pos_x)^2 + (table.y(exptab_11,ball.extra(bp1,1))-frac_pos_y)^2 < (6*ball.radius(bp1))^2
				AE_switch = 1
			end_if
		end_if
	end_if
	if AE_switch # 1
		if ball.extra(bp2,1) # 0
			if table.y(exptab_5,ball.extra(bp2,1)) < AE_long
				if (table.y(exptab_10,ball.extra(bp2,1))-frac_pos_x)^2 + (table.y(exptab_11,ball.extra(bp2,1))-frac_pos_y)^2 < (6*ball.radius(bp2))^2
					AE_switch = 2
				end_if
			end_if
		end_if
	end_if
	if AE_switch = 1
		hit_no = ball.extra(bp1,1)
	else if AE_switch = 2
		hit_no = ball.extra(bp2,1)
	else
		hit_no = hit_num + 1
		hit_num = hit_no
		add_position
	end_if
	renew_time
	ball.extra(bp1,1)=hit_no
	ball.extra(bp2,1)=hit_no
;===========================================================
;标记与bp1接触的球
	loop foreach local c1 ball.contactmap(bp1)
		local bp3 = contact.end1(c1)
		if bp3 = bp1
			bp3 = contact.end2(c1)
		end_if
		if type.pointer(bp3) = 'ball'
			if ball.group(bp3) = 'specimen'		;限定范围
				if ball.extra(bp3,1) = 0
					ball.extra(bp3,1) = hit_no
				else if table.y(exptab_5,ball.extra(bp3,1)) > AE_long
					ball.extra(bp3,1) = hit_no
				end_if
			end_if
		end_if
	end_loop
;标记与bp2接触的球
	loop foreach c1 ball.contactmap(bp2)
		bp3 = contact.end1(c1)
		if bp3 = bp2
			bp3 = contact.end2(c1)
		end_if
		if type.pointer(bp3) = 'ball'
			if ball.group(bp3) = 'specimen'		;限定范围
				if ball.extra(bp3,1) = 0
					ball.extra(bp3,1) = hit_no
				else if table.y(exptab_5,ball.extra(bp3,1)) > AE_long
					ball.extra(bp3,1) = hit_no
				end_if
			end_if
		end_if
	end_loop
;command
;	pause key
;end_command
end
;================================================
def add_position
	table.x(exptab_1,hit_num) = frac_pos_x							;记录位置
	table.y(exptab_1,hit_num) = frac_pos_y
	table.x(exptab_2,hit_num) = hit_num							;E_initial添加新的一行
	table.y(exptab_2,hit_num) = 0.0
	table.x(exptab_3,hit_num) = 0.0							;E_now添加新的一行
	table.y(exptab_3,hit_num) = 0.0
	table.x(exptab_16,hit_num) = hit_num
	table.x(exptab_17,hit_num) = hit_num
	table.x(exptab_18,hit_num) = hit_num
	table.x(exptab_19,hit_num) = hit_num
	table.x(exptab_20,hit_num) = hit_num
	table.x(exptab_21,hit_num) = hit_num
    table.x(exptab_50,hit_num) = hit_num
end
def renew_time
	table.x(exptab_5,hit_no) = mech.age - AE_time_0			;记录事件发生时刻					
	table.y(exptab_5,hit_no) = 0
end
;=================================================
def AE_energy
	if hit_num >0
		loop local num_t (1,hit_num)					
			table.y(exptab_5,num_t)=table.y(exptab_5,num_t)+1	;更新事件持续时间
			if table.y(exptab_5,num_t) <= AE_long
				table.y(exptab_2,num_t)=0								;E_initial列表清零
				table.y(exptab_3,num_t)=0								;E_now列表清零
			else if table.x(exptab_3,num_t) == 0
				table.x(exptab_3,num_t) = mech.age - AE_time_0	    ;记录事件end time
			end_if
		end_loop
		loop foreach local c contact.list							;记录E_now
			if contact.model(c) = 'linearpbond'					;限定范围
					local switch=0
					bp = contact.end1(c)
					if type.pointer(bp) = 'ball'
						if ball.extra(bp,1) # 0
							if table.y(exptab_5,ball.extra(bp,1)) <= AE_long
								local li_n=contact.force.normal(c)
								local li_s =contact.force.shear(c)
								local gang_n=contact.prop(c,"kn")
								local gang_s=contact.prop(c,"ks")
								if gang_n*gang_s # 0
									local tem_energy=((li_n)^2/gang_n+(li_s)^2/gang_s)/2
									;local tem_energy=math.abs(contact.energy(c,"estrain"))		;contact.energy(c,estrain)/contact.energy(c,epbstrain)
								else if gang_n # 0
									tem_energy=((li_n)^2/gang_n)/2
								else if gang_s # 0
									tem_energy=((li_s)^2/gang_s)/2
								else
									tem_energy=0
								end_if
								num_t=ball.extra(bp,1)
								table.y(exptab_3,num_t)=table.y(exptab_3,num_t)+tem_energy
								switch=1
								if contact.extra(c,1) = 0
									contact.extra(c,1) = tem_energy						;记录单个接触的初始应变能
								end_if
								table.y(exptab_2,num_t) = table.y(exptab_2,num_t)+contact.extra(c,1) 			
							end_if
						end_if
						if switch=0							;接触不属于任何活动的事件
							contact.extra(c,1)=0
						end_if
					end_if
			end_if
		end_loop	
		;if hit_num>table.size(exptab_2)								
		;	local num_min=table.size(exptab_2)+1
		;	loop num_t (num_min,hit_num)
		;		table.x(exptab_2,num_t)=table.x(exptab_3,num_t)
		;		table.y(exptab_2,num_t)=table.y(exptab_3,num_t)
		;	end_loop
		;end_if
		loop num_t (1,hit_num)										;更新E_delte
			if num_t <= table.size(exptab_4)
				if math.abs(table.y(exptab_4,num_t)) < math.abs((table.y(exptab_3,num_t)-table.y(exptab_2,num_t)))	;保留最大的delte_E
					table.y(exptab_4,num_t)=table.y(exptab_3,num_t)-table.y(exptab_2,num_t)
				end_if
			else
				table.x(exptab_4,num_t)=num_t
				table.y(exptab_4,num_t)=table.y(exptab_3,num_t)-table.y(exptab_2,num_t)
			end_if
		end_loop
	end_if
end
;=======================================================================
def strain_energy
	initial_en = table.y(exptab_2,450)
	now_en = table.y(exptab_3,450)
	delte_en = table.y(exptab_4,450)
end
;=======================================================================
def barycenter_find			;找事件重心
		;清零
	if hit_num >0
		loop local num_t (1,hit_num)					
			;table.y(exptab_5,num_t)=table.y(exptab_5,num_t)+1		;更新事件持续时间
			if table.y(exptab_5,num_t) <= AE_long
				table.y(exptab_7,num_t)=0								;Force_now_x列表清零
				table.y(exptab_8,num_t)=0								;Force_now_y列表清零
				table.y(exptab_9,num_t)=0	
			end_if
		end_loop;清零		
		;找所有的�
		loop foreach local bp ball.list
			if ball.extra(bp,1) # 0
			  if table.y(exptab_5,ball.extra(bp,1)) <= AE_long
				num_t=ball.extra(bp,1)
				table.y(exptab_7,num_t) = table.y(exptab_7,num_t)+ball.pos.x(bp)*ball.radius(bp)^2
				table.x(exptab_7,num_t) = table.x(exptab_4,num_t)
				table.y(exptab_8,num_t) = table.y(exptab_8,num_t)+ball.radius(bp)^2
				table.x(exptab_8,num_t) = table.x(exptab_4,num_t)
				table.y(exptab_9,num_t) = table.y(exptab_9,num_t)+ball.pos.y(bp)*ball.radius(bp)^2
				table.x(exptab_9,num_t) = table.x(exptab_4,num_t)
			  end_if
			end_if
		end_loop
		
		loop num_t (1,hit_num)
			if table.y(exptab_8,num_t) # 0
				table.y(exptab_10,num_t) = table.y(exptab_7,num_t)/table.y(exptab_8,num_t)
				table.x(exptab_10,num_t) = table.x(exptab_4,num_t)
				table.y(exptab_11,num_t) = table.y(exptab_9,num_t)/table.y(exptab_8,num_t)
				table.x(exptab_11,num_t) = table.x(exptab_4,num_t)
			end_if
		end_loop
		
	end_if
end
;===============================================================================================

def moment_tensor
	if hit_num >0
		loop local num_t (1,hit_num)					
			;table.y(exptab_5,num_t)=table.y(exptab_5,num_t)+1		;更新事件持续时间
			if table.y(exptab_5,num_t) <= AE_long
				table.y(exptab_14,num_t)=0								;Force_now_x列表清零
				table.y(exptab_15,num_t)=0								;Force_now_y列表清零
				table.y(exptab_16,num_t) = 0
				table.y(exptab_17,num_t) = 0
				table.y(exptab_18,num_t) = 0
				table.y(exptab_19,num_t) = 0
			end_if
		end_loop;清零
		;找所有颗粒的不平衡力
		loop foreach local bp ball.list
			num_t=ball.extra(bp,1)
			if ball.extra(bp,1) # 0
				if table.y(exptab_5,num_t) <= AE_long
					Force_unbal_x = ball.force.unbal(bp,1)
					Force_unbal_y = ball.force.unbal(bp,2)
					
					moment_tensor_xy = Force_unbal_x * (ball.pos(bp,2) - table.y(exptab_11,num_t))
					moment_tensor_yx = Force_unbal_y * (ball.pos(bp,1) - table.y(exptab_10,num_t))
					moment_tensor_xx = Force_unbal_x * (ball.pos(bp,1) - table.y(exptab_10,num_t))
					moment_tensor_yy = Force_unbal_y * (ball.pos(bp,2) - table.y(exptab_11,num_t))
					
					table.y(exptab_16,num_t) = table.y(exptab_16,num_t) + moment_tensor_xy				
					table.y(exptab_17,num_t) = table.y(exptab_17,num_t) + moment_tensor_yx				
					table.y(exptab_18,num_t) = table.y(exptab_18,num_t) + moment_tensor_xx		
					table.y(exptab_19,num_t) = table.y(exptab_19,num_t) + moment_tensor_yy						
				end_if
			end_if						 				
		end_loop
	end_if
end

;======================================================================================================
def AE_end
	if hit_num > 0
		loop foreach local bp ball.list
			if ball.extra(bp,1) # 0
				num_t = ball.extra(bp,1)
				if table.y(exptab_5,num_t) > AE_long
					ball.extra(bp,2) = 1
				end_if
			end_if
		end_loop
	end_if 
end

;=====================================================================================================
def AE_ini_time
	global AE_time_0 = mech.age
end
;============================================================================================
def AE_init
	AE_ini_time
	command
        dfn delete
        ball result clear
        fragment clear
        fragment register ball-ball range group specimen		;限定分析范围
		ball extra 1 0
		ball extra 2 0		;事件结束标记
		contact extra 1 0
		contact extra 2 0
		contact extra 3 0
		;set fish callback bond_break remove @look_AE
		set fish callback bond_break @look_AE
		set fish callback 48 @barycenter_find
		set fish callback 50.0 @AE_energy
		set fish callback 51 @moment_tensor
		set fish callback 49 @strain_energy
		set fish callback 53 @AE_end
        set echo off
        call AE_postprocess2D.py
        set echo on
	end_command 
	global hit_num = 0		;hit数量
	global hit_no = 0		;hit编号
	loop foreach local bp ball.list
		ball.extra(bp,1) = 0
	end_loop
	loop foreach local c contact.list
		contact.extra(c,1) = 0
	end_loop
	;创建存储列表
	global exptab_1 = table.create('hit_position')
	global exptab_2 = table.create('E_initial')
	global exptab_3 = table.create('E_now')
	global exptab_4 = table.create('E_delte')
	global exptab_5 = table.create('hit_during')				;x-事件发生时刻，y-事件持续时间
	global exptab_6 = table.create('magnitude')
	global exptab_7 = table.create('X_g_up')
	global exptab_8 = table.create('X_g_down')
	global exptab_9 = table.create('Y_g_up')
	global exptab_10 = table.create('X_g')
	global exptab_11 = table.create('Y_g') 
	global exptab_12 = table.create('m_1+m_2')
	global exptab_13 = table.create('m_2')
	global exptab_14 = table.create('Force_now_x')
	global exptab_15 = table.create('Force_now_y')
	global exptab_16 = table.create('moment_tensor_xy')
	global exptab_17 = table.create('moment_tensor_yx')
	global exptab_18 = table.create('moment_tensor_xx')
	global exptab_19 = table.create('moment_tensor_yy')
	global exptab_20 = table.create('M0_moment')	
	global exptab_21 = table.create('Mw_moment')
    global exptab_50 = table.create('tensors_R')
	;设置事件持续时间steps
	global AE_long = 30
end
	